from larcc import *

#DEFINIZIONE DI FUNZIONI

def larDomain(shape):
	V,CV = larSimplexGrid(shape)
	V = scalePoints(V, [1./d for d in shape])
	return V,CV

def larIntervals(shape):
	def larIntervals0(size):
		V,CV = larDomain(shape)
		V = scalePoints(V, [scaleFactor for scaleFactor in size])
		return V,CV
	return larIntervals0

def larMap(coordFuncs):
	def larMap0(domain):
		V,CV = domain
		V = TRANS(CONS(coordFuncs)(V)) # plasm CONStruction
		return V,CV
	return larMap0

def larSemiCylinder(params):
	radius,height= params
	def larSemiCylinder0(shape=[36,1]):
		domain = larIntervals(shape)([PI,1])
		V,CV = domain
		x = lambda V : [radius*COS(p[0]) for p in V]
		y = lambda V : [radius*SIN(p[0]) for p in V]
		z = lambda V : [height*p[1] for p in V]
		mapping = [x,y,z]
		model = larMap(mapping)(domain)
		return model
	return larSemiCylinder0

def larCylinder(params):
	radius,height= params
	def larCylinder0(shape=[36,1]):
		domain = larIntervals(shape)([2*PI,1])
		V,CV = domain
		x = lambda V : [radius*COS(p[0]) for p in V]
		y = lambda V : [radius*SIN(p[0]) for p in V]
		z = lambda V : [height*p[1] for p in V]
		mapping = [x,y,z]
		model = larMap(mapping)(domain)
		return model
	return larCylinder0

def larSemiRod(params):
	radius,height= params
	def larSemiRod0(shape=[36,1]):
		V,CV = checkModel(larSemiCylinder(params)(shape))
		return V,[range(len(V))]
	return larSemiRod0

def larRod(params):
	radius,height= params
	def larRod0(shape=[36,1]):
		V,CV = checkModel(larCylinder(params)(shape))
		return V,[range(len(V))]
	return larRod0

def larSphere(radius=1):
	def larSphere0(shape=[18,36]):
		V,CV = larIntervals(shape)([PI,2*PI])
		V = translatePoints(V,[-PI/2,-PI])
		domain = V,CV
		x = lambda V : [radius*COS(p[0])*SIN(p[1]) for p in V]
		y = lambda V : [radius*COS(p[0])*COS(p[1]) for p in V]
		z = lambda V : [radius*SIN(p[0]) for p in V]
		return larMap([x,y,z])(domain)
	return larSphere0

def larBall(radius=1):
	def larBall0(shape=[18,36]):
		V,CV = checkModel(larSphere(radius)(shape))
		return V,[range(len(V))]
	return larBall0

def larTorus(params):
	r,R = params
	def larTorus0(shape=[24,36,1]):
		domain = larIntervals(shape)([2*PI,2*PI,r])
		V,CV = domain
		x = lambda V : [(R + p[2]*COS(p[0])) * COS(p[1]) for p in V]
		y = lambda V : [(R + p[2]*COS(p[0])) * SIN(p[1]) for p in V]
		z = lambda V : [-p[2] * SIN(p[0]) for p in V]
		return larMap([x,y,z])(domain)
	return larTorus0


#DEFINISCO I VERTICI PER PAVIMENTO E PARETI PER IL SOLO PRIMO PIANO

V = [[3,3],[15,3],[4,4],[14,4],[4,14],[14,14],[3,15],[15,15]]

#CREO IL PAVIMENTO

PAVIMENTOV = [[2,3,4,5]]
MODELPAVIMENTO = V,PAVIMENTOV
PAVIMENTO = PROD([STRUCT(MKPOLS(MODELPAVIMENTO)),Q(1)])

#CREO LE PARETI

PARETIV = [[0,1,2,3],[0,2,4,6],[1,3,5,7],[4,5,6,7]]
MODELPARETI = V,PARETIV
PARETEINFERIORE = COLOR([0.184,0.309,0.334])(PROD([STRUCT(MKPOLS(MODELPARETI)),Q(2)]))
PARETESUPERIORE = COLOR(WHITE)(T(3)(2)(PROD([STRUCT(MKPOLS(MODELPARETI)),Q(2)])))

#IMPOSTAZIONE DELLA GRIGLIA(TEXTURE)

PIASTRELLA = CUBOID([0.5,0.1,0.5])
MIDPIASTRELLE = [T(1)(0.6),PIASTRELLA]
RIGAPIASTRELLE = STRUCT(NN(20)(MIDPIASTRELLE))
TRIDPIASTRELLE = [T(3)(0.6),RIGAPIASTRELLE]
PARETEPIASTRELLE = STRUCT(NN(3)(TRIDPIASTRELLE))
PARETENOPIASTRELLE = STRUCT([CUBOID([12.2,0.1,2])])
PARETEFINALE = DIFFERENCE([PARETENOPIASTRELLE,T([1,3])([-.5,-.5])(PARETEPIASTRELLE)])

PARETESUD = T([1,2])([2.9,2.9])(PARETEFINALE)
PARETENORD = T([1,2])([2.9,15.1])(PARETEFINALE)
PARETEEST = T([1,2])([3,2.9])(R([1,2])(PI/2)(PARETEFINALE))
PARETEOVEST = T([1,2])([15.1,2.9])(R([1,2])(PI/2)(PARETEFINALE))
GRIGLIA = COLOR([0.184,0.309,0.384])(STRUCT([PARETESUD,PARETEEST,PARETEOVEST,PARETENORD]))
PARETEINFERIORE = STRUCT([GRIGLIA,PARETEINFERIORE])

PARETI = STRUCT([PARETEINFERIORE,PARETESUPERIORE])

#CREO LA BASE DELLA STRUTTURA

BASE = STRUCT([PAVIMENTO,PARETI])

#CREO IL TETTO

TV = [[1,1,0],[17,1,0],[4,4,2],[14,4,2],[4,4,0],[14,4,0],[1,17,0],[4,14,0],[4,14,2],[14,14,0],[14,14,2],[17,17,0]]
TETTO = T(3)(4)(STRUCT([JOIN(AA(MK)(TV))]))

#CREAZIONE DELLE TEGOLE PER IL TETTO

TEGOLA = R([3,2])(5*PI/16)(R([2,2])(PI)(STRUCT(MKPOLS(larSemiRod([0.2,1.5])([18,1])))))
MIDTEGOLA = [T(1)(0.4),TEGOLA]
RIGATEGOLE1 = T([1,2,3])([1,1,4])(STRUCT(NN(39)(MIDTEGOLA)))
RIGATEGOLE2 = T([1,2,3])([1.8,1.8,4.8])(STRUCT(NN(35)(MIDTEGOLA)))
RIGATEGOLE3 = T([1,2,3])([2.6,2.6,5.6])(STRUCT(NN(31)(MIDTEGOLA)))

TETTOSUD = STRUCT([RIGATEGOLE1,RIGATEGOLE2,RIGATEGOLE3])
TETTONORD = T([1,2,3])([18,18,0])(R([1,2])(PI)(TETTOSUD))
TETTOEST = T([1,2,3])([18,0,0])(R([1,2])(PI/2)(TETTOSUD))
TETTOOVEST = T([1,2,3])([0,18,0])(R([1,2])(-PI/2)(TETTOSUD))

TETTOTEGOLE = COLOR([0.497,0.858,0.858])(STRUCT([TETTOSUD,TETTONORD,TETTOOVEST,TETTOEST]))

TETTOFINALE = STRUCT([TETTOTEGOLE,TETTO])

#ASSEMBLO IL PRIMO PIANO

PRIMOPIANO = STRUCT([TETTOFINALE,BASE])

#REPLICO IL PRIMO PIANO PER CREARE L'INTERA STRUTTURA

SECONDOPIANO = T([1,2,3])([1.5,1.5,6])(S([1,2,3])([0.83,0.83,0.83])(PRIMOPIANO))
TERZOPIANO = T([1,2,3])([2.8,2.8,11])(S([1,2,3])([0.69,0.69,0.75])(PRIMOPIANO))
QUARTOPIANO = T([1,2,3])([3.9,3.9,15.5])(S([1,2,3])([0.57,0.57,0.75])(PRIMOPIANO))

#CREO LA CIMA

CV = [[0,0,0],[2,0,0],[0,2,0],[2,2,0],[1,0,1],[1,2,1]]
PUNTA = COLOR([0.184,0.309,0.334])(T([1,2,3])([4,4,6])(S([1,2,3])([5,5,3])(STRUCT([JOIN(AA(MK)(CV))]))))
CIMA = T([1,2,3])([4.5,4.5,20])(S([1,2,3])([0.5,0.5,0.6])(STRUCT([PUNTA,PRIMOPIANO])))

#CREARE LE TEGOLE ANCHE PER LA CIMA DELLA COSTRUZIONE

TEGOLA = R([3,2])(5*PI/16)(R([2,2])(PI)(STRUCT(MKPOLS(larRod([0.2,1.5])([18,1])))))
MIDTEGOLA = [T(1)(0.4),TEGOLA]
RIGATEGOLE1 = T([1,2,3])([12,6.2,23.3])(R([1,2])(PI/2)(STRUCT(NN(13)(MIDTEGOLA))))
RIGATEGOLE2 = T([1,2,3])([11.1,6.2,24.1])(R([1,2])(PI/2)(STRUCT(NN(13)(MIDTEGOLA))))
RIGATEGOLE3 = T([1,2,3])([10.2,6.2,24.9])(R([1,2])(PI/2)(STRUCT(NN(13)(MIDTEGOLA))))

TETTOEST = STRUCT([RIGATEGOLE1,RIGATEGOLE2,RIGATEGOLE3])
TETTOOVEST = T([1,2,3])([18,18,0])(R([1,2])(PI)(STRUCT([RIGATEGOLE1,RIGATEGOLE2,RIGATEGOLE3])))

TETTOCIMA = COLOR([0.497,0.858,0.858])(STRUCT([TETTOEST,TETTOOVEST]))

CIMA = STRUCT([CIMA,TETTOCIMA])

#DETTAGLI PER LA CIMA

TRIV1 = [[0,0,0],[0,1,0],[6,0,6],[6,1,6],[12,0,0],[12,1,0]]
TRIANGOLO1 = STRUCT([JOIN(AA(MK)(TRIV1))])
TRIV2 = [[2,0,1],[2,1,1],[6,0,5],[6,1,5],[10,0,1],[10,1,1]]
TRIANGOLO2 = STRUCT([JOIN(AA(MK)(TRIV2))])
TRIANGOLO = DIFFERENCE([TRIANGOLO1,T(1)(0)(TRIANGOLO2)])

TRIANGOLOSUD = T([1,2,3])([6.5,6.3,23.85])(S([1,2,3])([0.42,0.4,0.3])(TRIANGOLO))
TRIANGOLONORD = T(2)(5)(TRIANGOLOSUD)

CIMA = STRUCT([CIMA,TRIANGOLOSUD,TRIANGOLONORD])

#RISULTATO

MODEL = T([1,2,3])([50,50,6])(STRUCT([PRIMOPIANO,SECONDOPIANO,TERZOPIANO,QUARTOPIANO,CIMA]))
#VIEW(MODEL)

#AREA CIRCOSTANTE AL MONUMENTO

SOPRAELEVAMENTOV = [[3,3,5],[3,15,5],[15,15,5],[15,3,5],[0,0,0],[0,17,0],[17,17,0],[17,0,0]]
SOPRAELEVAMENTO = COLOR([0.803,0.521,0.247])(T([1,2,3])([50,50,1])(STRUCT([JOIN(AA(MK)(SOPRAELEVAMENTOV))])))
MODELELEVATO = T([1,2,3])([-95,-127,-1.6])(S([1,2,3])([2.9,2.9,2.9])(STRUCT([MODEL,SOPRAELEVAMENTO])))

ACQUA = COLOR(BLUE)(CUBOID([100,100,1]))

TERRA1 = T(3)(1)(CUBOID([100,15,5]))
TERRA2 = T([2,3])([67,1])(CUBOID([100,33,5]))
TERRA3 = T([2,3])([50,1])(CUBOID([50,17,5]))

TERRA = COLOR(GREEN)(STRUCT([TERRA2,TERRA1,TERRA3]))

#COSTRUZIONE DI UN PONTE

PASSERELLA1 = T([1,2,3])([20,14,9])(CUBOID([10,37,1]))
PASSERELLA2 = T([1,2,3])([15,25,9])(CUBOID([20,15,1]))

PASSERELLA = STRUCT([PASSERELLA2,PASSERELLA1])

SOSTEGNO01 = T([1,2])([20,14])(CUBOID([1,1,13]))
SOSTEGNO02 = T([1,2])([29,14])(CUBOID([1,1,13]))
SOSTEGNO03 = T([1,2])([15,25])(CUBOID([1,1,13]))
SOSTEGNO04 = T([1,2])([20,25])(CUBOID([1,1,13]))
SOSTEGNO05 = T([1,2])([29,25])(CUBOID([1,1,13]))
SOSTEGNO06 = T([1,2])([34,25])(CUBOID([1,1,13]))
SOSTEGNO07 = T([1,2])([15,40])(CUBOID([1,1,13]))
SOSTEGNO08 = T([1,2])([20,40])(CUBOID([1,1,13]))
SOSTEGNO09 = T([1,2])([29,40])(CUBOID([1,1,13]))
SOSTEGNO10 = T([1,2])([34,40])(CUBOID([1,1,13]))
SOSTEGNO11 = T([1,2])([20,50])(CUBOID([1,1,13]))
SOSTEGNO12 = T([1,2])([29,50])(CUBOID([1,1,13]))
SOSTEGNO13 = T([1,2])([20,11])(CUBOID([1,1,10]))
SOSTEGNO14 = T([1,2])([29,11])(CUBOID([1,1,10]))
SOSTEGNO15 = T([1,2])([20,53])(CUBOID([1,1,10]))
SOSTEGNO16 = T([1,2])([29,53])(CUBOID([1,1,10]))

SOSTEGNI = STRUCT([SOSTEGNO12,SOSTEGNO11,SOSTEGNO10,SOSTEGNO09,SOSTEGNO08,SOSTEGNO07,SOSTEGNO06,SOSTEGNO05,SOSTEGNO04,SOSTEGNO03,SOSTEGNO02,SOSTEGNO01,SOSTEGNO16,SOSTEGNO15,SOSTEGNO14,SOSTEGNO13])

RINGHIERA01 = T([1,2,3])([20,15,12])(CUBOID([1,10,1]))
RINGHIERA02 = T([1,2,3])([29,15,12])(CUBOID([1,10,1]))
RINGHIERA03 = T([1,2,3])([15,25,12])(CUBOID([1,15,1]))
RINGHIERA04 = T([1,2,3])([34,25,12])(CUBOID([1,15,1]))
RINGHIERA05 = T([1,2,3])([20,40,12])(CUBOID([1,10,1]))
RINGHIERA06 = T([1,2,3])([29,40,12])(CUBOID([1,10,1]))

RINGHIERA07 = T([1,2,3])([15,25,12])(CUBOID([5,1,1]))
RINGHIERA08 = T([1,2,3])([29,25,12])(CUBOID([5,1,1]))
RINGHIERA09 = T([1,2,3])([15,40,12])(CUBOID([5,1,1]))
RINGHIERA10 = T([1,2,3])([29,40,12])(CUBOID([5,1,1]))

RINGHIERA11 = [[20,11,9],[20,11,10],[20,14,12],[20,14,13],[21,11,9],[21,11,10],[21,14,12],[21,14,13]]
RINGHIERA11 = STRUCT([JOIN(AA(MK)(RINGHIERA11))])
RINGHIERA12 = T(1)(9)(RINGHIERA11)
RINGHIERA13 = T([1,2])([50,65])(R([1,2])(PI)(RINGHIERA11))
RINGHIERA14 = T(1)(-9)(RINGHIERA13)

RINGHIERA = STRUCT([RINGHIERA10,RINGHIERA09,RINGHIERA08,RINGHIERA07,RINGHIERA06,RINGHIERA05,RINGHIERA04,RINGHIERA03,RINGHIERA02,RINGHIERA01,RINGHIERA11,RINGHIERA12,RINGHIERA13,RINGHIERA14])

SCALINI1 = T([1,2,3])([20,13,8])(CUBOID([10,2,1]))
SCALINI2 = T([1,2,3])([20,12,7])(CUBOID([10,2,1]))
SCALINI3 = T([1,2,3])([20,11,6])(CUBOID([10,2,1]))

SCALINI4 = T([1,2,3])([20,50,8])(CUBOID([10,2,1]))
SCALINI5 = T([1,2,3])([20,51,7])(CUBOID([10,2,1]))
SCALINI6 = T([1,2,3])([20,52,6])(CUBOID([10,2,1]))

SCALINI = STRUCT([SCALINI1,SCALINI6,SCALINI5,SCALINI4,SCALINI3,SCALINI2])

PONTE = COLOR(RED)(STRUCT([PASSERELLA,SOSTEGNI,RINGHIERA,SCALINI]))

#COSTRUZIONE DI UN SENTIERO

STRADA1 = T([1,3])([20,5.05])(CUBOID([10,15,1]))
STRADA2 = T([1,2,3])([20,50,5.05])(CUBOID([10,25,1]))
STRADA3 = T([1,2,3])([20,75,5.05])(CUBOID([50,10,1]))
STRADA4 = T([1,2,3])([70,67,5.05])(CUBOID([10,33,1]))

STRADA = COLOR([0.545,0.27,0.074])(STRUCT([STRADA1,STRADA2,STRADA3,STRADA4]))

#INSERIMENTO DEI DETTAGLI

#INSERIMENTO STRADA

ORNAMENTOSTRADALE = T([1,2,3])([20.5,0.5,6])(STRUCT(MKPOLS(larBall(0.5)([15,15]))))
ORNAMENTOSTRADALE = [T(2)(1),ORNAMENTOSTRADALE]
ORNAMENTOSTRADALE1 = T(2)(-1)(STRUCT(NN(11)(ORNAMENTOSTRADALE)))
ORNAMENTOSTRADALE2 = T(2)(50)(STRUCT(NN(34)(ORNAMENTOSTRADALE)))
ORNAMENTOSTRADALE3 = T([1,2])([121,64])(R([1,2])(PI/2)(T(2)(50)(STRUCT(NN(50)(ORNAMENTOSTRADALE)))))
ORNAMENTOSTRADALE4 = T([1,2])([50,66])(STRUCT(NN(9)(ORNAMENTOSTRADALE)))
ORNAMENTOSTRADALE5 = T([1,2])([50,83])(STRUCT(NN(16)(ORNAMENTOSTRADALE)))

ORNAMENTOPARALLELO1 = T(1)(9)(ORNAMENTOSTRADALE1)
ORNAMENTOPARALLELO2 = T([1,2])([9,50])(STRUCT(NN(24)(ORNAMENTOSTRADALE)))
ORNAMENTOPARALLELO3 = T([1,2])([121,55])(R([1,2])(PI/2)(T(2)(50)(STRUCT(NN(41)(ORNAMENTOSTRADALE)))))
ORNAMENTOPARALLELO4 = T([1,2])([59,66])(STRUCT(NN(33)(ORNAMENTOSTRADALE)))

ORNAMENTOSTRADALE = COLOR([0.40,0.40,0.40])(STRUCT([ORNAMENTOSTRADALE1,ORNAMENTOSTRADALE2,ORNAMENTOSTRADALE3,ORNAMENTOSTRADALE4,ORNAMENTOSTRADALE5,ORNAMENTOPARALLELO1,ORNAMENTOPARALLELO2,ORNAMENTOPARALLELO3,ORNAMENTOPARALLELO4]))

#INSERIMENTO ALBERO

ALBEROBASE = COLOR([0.36,0.2,0.09])(STRUCT(MKPOLS(larTorus([1,1.5])([18,18,1]))))
ALBEROTRONCO = COLOR([0.36,0.2,0.09])(STRUCT(MKPOLS(larRod([1.5,10])([18,1]))))
FOGLIA = T(3)(10)(STRUCT(MKPOLS(larBall(2)([18,18]))))
ALBEROFOGLIE = COLOR([1,0.5,0.67])(STRUCT([T([1,3])([2.5,4])(FOGLIA),T([1,3])([-2.5,4])(FOGLIA),T([2,3])([2.5,4])(FOGLIA),T([2,3])([-2.5,4])(FOGLIA),T(1)(2.5)(FOGLIA),T(1)(-2.5)(FOGLIA),T(2)(2.5)(FOGLIA),T(2)(-2.5)(FOGLIA),T([1,2,3])([3,3,6])(FOGLIA),T([1,2,3])([-3,3,6])(FOGLIA),T([1,2,3])([3,-3,6])(FOGLIA),T([1,2,3])([-3,-3,6])(FOGLIA),T([1,2,3])([3,3,2])(FOGLIA),T([1,2,3])([-3,3,2])(FOGLIA),T([1,2,3])([3,-3,2])(FOGLIA),T([1,2,3])([-3,-3,2])(FOGLIA),T([1,2,3])([3,3,-2])(FOGLIA),T([1,2,3])([-3,3,-2])(FOGLIA),T([1,2,3])([3,-3,-2])(FOGLIA),T([1,2,3])([-3,-3,-2])(FOGLIA)]))
ALBERO = T([1,2,3])([5,5,6])(STRUCT([ALBEROTRONCO,ALBEROBASE,ALBEROFOGLIE]))
ALBERI = STRUCT([ALBERO,T(1)(90)(ALBERO),T(2)(90)(ALBERO),T(2)(60)(ALBERO),T([1,2])([90,90])(ALBERO)])

MAPPA = STRUCT([TERRA,ACQUA,MODELELEVATO,PONTE,STRADA,ORNAMENTOSTRADALE])
VIEW(STRUCT([ALBERI,MAPPA]))